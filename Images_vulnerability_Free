Docker images without vulnerability

jenkins/jenkins:2.289.3-lts-alpine  -  found 4 issues              <<<<<<<<<<<<<<<<<         (good website for Alpine - https://pkgs.alpinelinux.org/package/edge/community/x86_64/openjdk11-jre)
postgres:12-alpine -  no vulnerable paths found
node:12-alpine     -  no vulnerable paths found
node:14-alpine     -  no vulnerable paths found
node:lts-alpine    -  no vulnerable paths found (look below for an example)
hashicorp/packer:1.7.3 - no vulnerable paths found
python:3.8-alpine  - no vulnerable paths found
traefik:1.7-alpine  - no vulnerable paths found
tomcat:10.0-jdk11-corretto  - no vulnerable paths found       Good examples for tomcat   (https://github.com/docker-library/tomcat)
nginx:1.21.1-alpine         - no vulnerable paths found                         (might be fit for React)
amazoncorretto:8-alpine-jdk   - no vulnerable paths found 

adoptopenjdk/openjdk11:jre-11.0.9.1_1-alpine - 7 vulnerabilities (https://snyk.io/blog/best-practices-to-build-java-containers-with-docker/)


--------------------------------
nodeJS without vulnerabilities!


FROM node:12 AS builder

# Create app directory
WORKDIR /usr/src/app
COPY package*.json ./
COPY . .

FROM node:lts-alpine

EXPOSE 8080

COPY --from=builder /usr/src/app ./
RUN npm install --production
USER node
CMD [ "node", "server.js" ]


/> snyk container test <image_name> --file=Dockerfile
/> docker run -d -p 8081:8080 multistage:node12
/> docker container exec -it <container_name> sh

--------------------------------server.js
'use strict';

const express = require('express');

// Constants
const PORT = 8080;
const HOST = '0.0.0.0';

// App
const app = express();
app.get('/', (req, res) => {
  res.send('Hello World');
});

app.listen(PORT, HOST);
console.log(`Running on http://${HOST}:${PORT}`);
--------------------------------------package.json

{
  "name": "docker_web_app",
  "version": "1.0.0",
  "description": "Node.js on Docker",
  "author": "First Last <first.last@example.com>",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.16.1"
  }
}

https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/
--------------------------------------------------------------------------------

FROM node:lts-alpine@sha256:b2da3316acdc2bec442190a1fe10dc094e7ba4121d029cb32075ff59bb27390a
RUN apk add dumb-init
ENV NODE_ENV production
WORKDIR /usr/src/app
COPY --chown=node:node . .
RUN npm install --production
USER node
CMD ["dumb-init", "node", "server.js"]


vim .dockerignore
*/node_modules
Dockerfile

https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/?utm_medium=Partner&utm_source=Docker&utm_content=Docker-for-Nodejs-blog-Q1

================================================================================


Golang:
FROM golang:1.10 as builder

WORKDIR /tmp/go
COPY hello.go ./
RUN CGO_ENABLED=0 go build -a -ldflags '-s' -o hello

FROM scratch
CMD [ "/hello" ]
COPY --from=builder /tmp/go/hello /hello


/> vim hello.go
package main
import "fmt"
func main() {
    fmt.Println("hello world")

/> docker build -t go:scratch .
/> docker run -it --rm --name my-running-app go:scratch

https://cloud.google.com/architecture/best-practices-for-building-containers
